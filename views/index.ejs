<%-include('partials/header')%>

    <section id="hero_section">

    </section>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script>
            const hero_section = document.getElementById('hero_section');
            if (userEmail) {
                
        hero_section.innerHTML = `

        <section class="p-2 bg-gradient-to-br from-blue-50 to-blue-100 min-h-screen">
                <div class="flex lg:flex-row-reverse justify-around w-full flex-col">
                    <div class="lg:w-[50%] mx-auto px-4" w-full>
                    <h1 class="text-2xl font-bold text-center text-blue-600 py-4">Create or Use the templates</h1>
                    <div class="bg-white rounded-xl shadow-md border-2 px-2 ">
                        <div class="flex justify-between items-center mt-5 px-2">
                            <h2 class="lg:text-3xl text-lg font-bold text-blue-600">Existing Templates</h2>
                            <button
                                class="bg-gradient-to-r from-blue-500 text-md to-blue-700 text-white lg:px-6 px-2 py-2 rounded-lg hover:from-blue-600 hover:to-blue-800 transition duration-300" id="open_template_form">
                                Create New Template +
                            </button>
                        </div>
                        <div id="templates_data" class="flex flex-col h-[33vh] overflow-y-auto">
                            
                        </div>
                    </div>
                </div>
            
                    <div class="lg:w-[50%] mx-auto px-4 w-full">
                        <h1 class="text-2xl font-bold text-center text-blue-600 py-4">How to Use VuNet Sizing Calculator</h1>
                        <div class="grid md:grid-cols-2 gap-8 max-w-5xl mx-auto">
                            <!-- Step 1: Create Template -->
                            <div class="bg-white rounded-xl shadow-lg p-6 ">
                                <div class="flex items-center mb-4">
                                    <span class="text-3xl font-bold text-blue-600 mr-4">1</span>
                                    <h2 class="text-2xl font-semibold text-gray-800">Create Template</h2>
                                </div>
                                <p class="text-gray-600">Create scenario-specific templates for different infrastructure sizing needs. Each template can be customized to represent unique deployment environments.</p>
                            </div>
                
                            <!-- Step 2: Input Data -->
                            <div class="bg-white rounded-xl shadow-lg p-6 ">
                                <div class="flex items-center mb-4">
                                    <span class="text-3xl font-bold text-blue-600 mr-4">2</span>
                                    <h2 class="text-2xl font-semibold text-gray-800">Enter Input</h2>
                                </div>
                                <p class="text-gray-600">Open the Template created and Input key parameters like number of servers, daily volume of transaction, size of logs ,etc.</p>
                            </div>
                
                            <!-- Step 3: Export Results -->
                            <div class="bg-white rounded-xl shadow-lg p-6">
                                <div class="flex items-center mb-4">
                                    <span class="text-3xl font-bold text-blue-600 mr-4">3</span>
                                    <h2 class="text-2xl font-semibold text-gray-800">Export Results</h2>
                                </div>
                                <p class="text-gray-600">Export the results to Excel document for further analysis and sharing.</p>
                            </div>
                
                            <!-- Step 4: Save Inputs -->
                            <div class="bg-white rounded-xl shadow-lg p-6">
                                <div class="flex items-center mb-4">
                                    <span class="text-3xl font-bold text-blue-600 mr-4">4</span>
                                    <h2 class="text-2xl font-semibold text-gray-800">Save Inputs</h2>
                                </div>
                                <p class="text-gray-600">Save your input configurations in the template for future reference.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            <!-- Modal -->
        <div id="createTemplateModal" class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center z-50 hidden">
            <div class="bg-white w-[40%] mx-auto border rounded border-gray-300 p-4">
                <div class="flex items-center justify-between">
                    <div class="w-[98%] text-center">
                        <p class="text-center text-2xl font-bold">Create Template</p>
                    </div>
                    <p id="close_form" class="text-2xl cursor-pointer">X</p>
                </div>
                <form class="flex flex-col space-y-4 mx-auto p-5 rounded" id="template_form">
                    <label for="template_name">Template Name:</label>
                    <input 
                        type="text" 
                        id="template_name" 
                        name="template_name" 
                        required 
                        class="border-2 border-gray-400 rounded p-2" 
                        placeholder="Please enter unique template name">
                    
                    <input 
                        type="hidden" 
                        name="user_email" 
                        value="${userEmail}">
                    
                    <button type="submit" class="bg-blue-600 text-white px-5 py-2 w-full rounded">
                        Create Template
                    </button>
                </form>
            </div>
        </div>
    `
        const templates_data = document.getElementById('templates_data');
        fetch(`/internal/get_user_assets/${userEmail}`)
                    .then(response => response.json())
                    .then(data => {
                        const templates = data.template_data;
                        if (templates.length == 0)
                        {
                            templates_data.innerHTML = `
                              <p class="text-center py-12 text-2xl">No Template Exists</p>
                            `
                        }
                        else
                        {
                            templates_data.innerHTML = templates.map(template => `
                                <a href="/internal/template/${template.template_name}">
                                    <div
                                        class="px-6 py-4 hover:bg-blue-50 transition duration-300 flex justify-between items-center border border-gray-300 rounded my-2">
                                        <div>
                                            <h3 class="text-lg font-semibold text-gray-800">
                                                ${template.template_name}
                                            </h3>
                                        <p class="text-sm text-gray-500">Last Updated: ${new Date(template.timestamp).toLocaleString('en-GB')}</p>
                                        </div>
                                        <div class="flex space-x-4 items-center">
                                            <a href="/internal/template/${template.template_name}"
                                                class="text-blue-500 hover:text-blue-700">Open</a>
                                            <a href="/internal/delete_template/${userEmail}/${template.template_name}" class="text-red-500 hover:text-red-700">Delete</a>
                                        </div>
                                    </div>
                                </a>
                                `).join('')
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching user assets:', error);
                    });
                    
            document.getElementById('open_template_form').addEventListener('click', function() {
                document.getElementById('createTemplateModal').classList.remove('hidden');
            });

            document.getElementById('close_form').addEventListener('click', function() {
                document.getElementById('createTemplateModal').classList.add('hidden');
            });

            $('#template_form').on('submit', function(event) {
                $('#loader').fadeIn('fast');
                event.preventDefault();
                const formData = $(this).serialize(); // Serialize form data for submission

                $.ajax({
                        url: '/internal/create_template',
                        type: 'POST',
                        data: formData,
                        success: function(response) {
                            if (response.status == 200) {
                                $('#loader').fadeOut('slow');
                                Swal.fire({
                                    title: "Template Created Successfully !",
                                    icon: "success"
                                    });
                                $('#createTemplateModal').addClass('hidden');
                                // Optionally, refresh the templates list
                                location.reload();
                            } else {
                                $('#loader').fadeOut('slow');
                                alert('Error creating template: ' + response.message);
                            }
                        },
                        error: function(xhr, status, error) {
                            // Check if the backend sent an error message
                            let errorMessage = 'An error occurred.';
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage = xhr.responseJSON.message;
                            } else if (xhr.responseText) {
                                errorMessage = xhr.responseText;
                            }
                            console.error('Error:', errorMessage);
                            alert(errorMessage);
                        }
                    });

            });
            }
            else {
                hero_section.innerHTML = `
        <section class="p-2 bg-gradient-to-br from-blue-50 to-blue-100 min-h-screen">
            <div class="flex justify-around items-center w-full flex-col-reverse lg:flex-row">
            <div class="lg:text-justify text-center">
                    <h1 class="text-6xl font-bold  leading-24">VuSizing Calculator</h1>
                    <br>
                    <p class="text-2xl">Calculate the sizing required to install vuSmartMaps in your environment.</p>
            </div>
            <div>
                <img src="/images/home-vmonitor.svg"  class="h-[70vh] w-[60vh]">
            </div>
            </div>
        </section>
        `
            }

        </script>